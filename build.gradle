plugins {
    id 'fabric-loom' version "${loom_version}" apply(false)
}

subprojects {
    apply plugin: 'java'

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()
    java.withJavadocJar()

    jar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
        manifest {
            attributes([
                    'Specification-Title'     : mod_name,
                    'Specification-Vendor'    : mod_author,
                    'Specification-Version'   : project.jar.archiveVersion,
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : project.jar.archiveVersion,
                    'Implementation-Vendor'   : mod_author,
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'Timestamp'               : System.currentTimeMillis(),
                    'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                    'Built-On-Minecraft'      : minecraft_version
            ])
        }
    }

    sourcesJar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
    }

    repositories {
        maven {
            name = 'Parchment'
            url = 'https://maven.parchmentmc.org'
            content {
                includeGroupAndSubgroups 'org.parchmentmc.data'
            }
        }
        maven {
            name = 'Fabric'
            url = 'https://maven.fabricmc.net/'
            content {
                includeGroupAndSubgroups 'net.fabricmc.fabric-api'
            }
        }
        maven {
            name = "Cloth Config"
            url "https://maven.shedaniel.me/"
            content {
                includeGroupAndSubgroups 'me.shedaniel'
                includeGroupAndSubgroups 'dev.architectury'
            }
        }
        maven {
            name = "Mod Menu"
            url 'https://maven.terraformersmc.com/releases'
            content {
                includeGroupAndSubgroups 'com.terraformersmc'
            }
        }
        maven {
            name = "Modrinth"
            url = "https://api.modrinth.com/maven"
            content {
                includeGroupAndSubgroups 'maven.modrinth'
            }
        }

        // Non-specific
        maven {
            name = 'NeoForged'
            url = 'https://maven.neoforged.net/releases'
        }
        maven {
            name = 'Mojang and Mixins'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
    }

    processResources {
        var replaceProperties = [
                mod_name: mod_name,
                resource_pack_format_number: resource_pack_format_number,
                data_pack_format_number: data_pack_format_number,
                mod_id: mod_id,
                major_fml_version: major_fml_version,
                version: project.version,
                description: project.description,
                mod_author: mod_author,
                contributors: contributors,
                homepage: homepage,
                sources: sources,
                issues: issues,
                license: license,
                icon: icon,
                neoforge_version: neoforge_version,
                fabric_loader_version: fabric_loader_version,
                fabric_version: fabric_version,
                minecraft_version: minecraft_version,
                next_minecraft_version: next_minecraft_version
        ]
        inputs.properties replaceProperties

        filesMatching(['META-INF/mods.toml','fabric.mod.json','pack.mcmeta','*.mixins.json']) {
            expand replaceProperties + [project: project]
        }
    }

    tasks.withType(JavaCompile).configureEach {

        it.options.encoding = 'UTF-8'
        it.options.release = 17
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata) {

        enabled = false
    }
}
